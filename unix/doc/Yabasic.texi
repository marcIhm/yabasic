\input texinfo
@setfilename Yabasic.info
@documentencoding us-ascii
@direntry
* Yabasic: (Yabasic).           ??? 
@end direntry

@node Top, Introduction, , (dir)
@top Yabasic

@menu
* Introduction::
* The yabasic-program under Windows::
* The yabasic-program under Unix::
* Some features of yabasic; grouped by topic::
* All commands and functions of yabasic::
* A grab-bag of some general concepts and terms::
* A few example programs::
* The Copyright of yabasic::

@detailmenu
--- The Detailed Node Listing ---

Introduction

* About this document::
* About yabasic::

The yabasic-program under Windows

* Starting yabasic::
* Options::
* The context Menu::

The yabasic-program under Unix

* Starting yabasic: The yabasic-program under Unix - Starting yabasic.
* Options: The yabasic-program under Unix - Options.
* Setting defaults::

Some features of yabasic, grouped by topic

* print; input and others::
* Control statements; loops; if and switch::
* Drawing and painting::
* Reading from and writing to files::
* Subroutines and Libraries::
* String processing::
* Arithmetic::
* Data and such::
* Other interesting commands_::

All commands and functions of yabasic

* A note on the synopsis-sections of reference-entries_::
* A::
* B::
* C::
* D::
* E::
* F::
* G::
* H::
* I::
* L::
* M::
* N::
* O::
* P::
* R::
* S::
* T::
* U::
* V::
* W::
* X::
* Special characters::

A grab-bag of some general concepts and terms

* Logical shortcuts::
* Conditions and expressions::
* References on arrays::
* Specifying Filenames under Windows::
* Escape-sequences::

A few example programs

* A very simple program::
* A part of the demo of yabasic::

@end detailmenu
@end menu

@node Introduction, The yabasic-program under Windows, Top, Top
@chapter Introduction

@menu
* About this document::
* About yabasic::
@end menu

@node About this document, About yabasic, , Introduction
@section About this document

This document describes yabasic.
You will find information about the yabasic 
interpreter (the program @code{yabasic} under Unix or 
@code{yabasic.exe} under Windows)
as well as the language itself.


@noindent
This document applies to version 2.730 of yabasic

However, this document does not contain the latest news about yabasic or a FAQ.
As such information tends to change rapidly, it is presented online only 
at @uref{http://www.yabasic.de,www.yabasic.de}.

Although @acronym{basic} has its reputation as a language for beginning programmers,
this is not an introduction to programming at large. Rather this text assumes, that
the reader has some (moderate) experience with writing and starting computer programs.


@node About yabasic, , About this document, Introduction
@section About yabasic

yabasic is a traditional basic interpreter. It understands most of the typical basic-constructs, like @code{goto}, @code{gosub}, line numbers, @code{read}, @code{data} or string-variables with a trailing '@samp{$}'. But on the other hand, yabasic implements some more advanced programming-constructs like subroutines or libraries (but @i{not} objects). yabasic works much the same under Unix and Windows.

yabasic puts emphasis on giving results quickly and easily; therefore simple commands are provided to open a graphic window, print the graphics or control the console screen and get keyboard or mouse information. The example below opens a window, draws a circle and prints the graphic:

@example

open window 100,100
open printer
circle 50,50,40
text 10,50,"Press any key to get a printout"
clear screen
inkey$
close printer
close window
@end example

This example has fewer lines, than it would have in many other programming languages. In the end however yabasic lacks behind more advanced and modern programming languages like C++ or Java. But as far as it goes it tends to give you results more quickly and easily.

@node The yabasic-program under Windows, The yabasic-program under Unix, Introduction, Top
@chapter The yabasic-program under Windows

@menu
* Starting yabasic::
* Options::
* The context Menu::
@end menu

@node Starting yabasic, Options, , The yabasic-program under Windows
@section Starting yabasic

Once, yabasic has been set up correctly, there are three ways to start it:

@enumerate 

@item
@i{Rightclick on your desktop:} The desktop menu appears with a submenu named @i{new}. From this submenu choose yabasic. This will create a new icon on your desktop. If you rightclick on this icon, its context menu (@pxref{id2643793}) will appear; choose Execute to execute the program.

@item
As a variant of the way described above, you may simply @i{create a file with the ending @file{.yab}} (e.g. with your favorite editor). Everything else then works as described above.

@item
@i{From the start-menu:} Choose yabasic from your start-menu. A console-window will open and you will be asked to type in your program. Once you are finished, you need to type @samp{return} twice, and yabasic will parse and execute your program.

@quotation

@strong{Note}

This is @i{not} the preferred way of starting yabasic ! Simply because the program, that you have typed, @i{can not be saved} and will be lost inevitably ! There is no such thing as a @code{save}-command and therefore no way to conserve the program, that you have typed. This mode is only intended for quick hacks, and short programs.
@end quotation
@end enumerate

@node Options, The context Menu, Starting yabasic, The yabasic-program under Windows
@section Options

Under Windows yabasic will mostly be invoked by double-clicking on an appropriate icon; this way you do not have a chance to specify any of the commandline options below. However, advanced users may add some of those options to the appropriate entries in the registry.

All the options below may be abbreviated, as long as the abbreviation does not become ambiguous. For example, you may write @samp{-e} instead of @samp{-execute}.

@table @asis

@item @samp{-help} or @samp{-?}
Prints a short help message, which itself describes two further help-options.

@item @samp{-geometry +@var{X-POSITION}+@var{Y-POSITION}}
Sets the position of the graphic window, that is opened by @code{open window} (the @i{size} of this window, of course, is specified within the @code{open window}-command). An example would be @samp{-geometry +20+10}, which would place the graphic window 10 pixels below the upper border and 20 pixels right of the left border of the screen. This value cannot be changed, once yabasic has been started.

@item @samp{-font @var{NAME-OF-FONT}}
Name of the font, which will be used for graphic-text; can be any of @samp{decorative, dontcare, modern, roman, script, swiss}. You may append a fontsize (measured in pixels) to any of those fontnames; for example @samp{-font swiss30} chooses a swiss-type font with a size of 30 pixels.

@item @samp{-execute @var{A-PROGRAM-AS-A-SINGLE-STRING}}
With this option you may specify some yabasic-code to be executed right away.This is useful for very short programs, which you do not want to save within a file. If this option is given, yabasic will not read any code from a file. Let's say, you have forgotten some of the square numbers between 1 and 10; in this case the command @samp{yabasic -e 'for a=1 to 10:print a*a:next a'} will give you the answer immediately.

@item @samp{-infolevel @var{INFOLEVEL}}
Change the @i{infolevel} of yabasic, where @var{INFOLEVEL} can be one of @samp{debug}, @samp{note}, @samp{warning}, @samp{error} and @samp{fatal} (the default is @samp{warning}). This option changes the amount of debugging-information yabasic produces. However, normally only the author of yabasic (@i{me} !) would want to change this.

@item @samp{-doc @var{NAME-OF-A-PROGRAM}}
Print the @i{embedded documentation} of the named program. The embedded documentation of a program consists of all the comments within the program, which start with the special keyword @code{doc (@pxref{doc})}. This documentation can also be seen by choosing the corresponding entry from the context-menu of any yabasic-program.

@item @samp{-librarypath @var{DIRECTORY-WITH-LIBRARIES}}
Change the directory, wherein libraries will be searched and imported (with the @code{import (@pxref{import})}-command). See also @code{this entry (@pxref{import})} for more information about the way, libraries are searched.
@end table

@node The context Menu, , Options, The yabasic-program under Windows
@section The context Menu

Like every other icon under Windows, the icon of every yabasic-program has a @i{context menu} offering the most frequent operations, that may be applied to a yabasic-program.

@table @asis

@item Execute
This will invoke yabasic to execute your program. The same happens, if you @i{doubleclick} on the icon.

@item Edit
notepad will be invoked, allowing you to edit your program.

@item View docu
This will present the embedded documentation of your program. Embedded documentation is created with the special comment @code{doc (@pxref{doc})}.
@end table

@node The yabasic-program under Unix, Some features of yabasic; grouped by topic, The yabasic-program under Windows, Top
@chapter The yabasic-program under Unix

@menu
* Starting yabasic: The yabasic-program under Unix - Starting yabasic.
* Options: The yabasic-program under Unix - Options.
* Setting defaults::
@end menu

@node The yabasic-program under Unix - Starting yabasic, The yabasic-program under Unix - Options, , The yabasic-program under Unix
@section Starting yabasic

If your system administrator (vulgo @i{root}) has installed yabasic correctly, there are three ways to start it:

@enumerate 

@item
You may use your favorite editor (emacs, vi ?) to put your program into a file (e.g. @file{foo}). Make sure that the very first line starts with the characters '@samp{#!}' followed by the full pathname of yabasic (e.g. '@samp{#!/usr/local/bin/yabasic}'). This @i{she-bang}-line ensures, that your Unix will invoke yabasic to execute your program (see also the entry for the hash (@pxref{#})-character). Moreover, you will need to change the permissions of your yabasic-program @file{foo}, e.g. @samp{chmod u+x foo}. After that you may invoke yabasic to invoke your program by simply typing @samp{foo} (without even mentioning yabasic). However, if your @code{PATH}-variable does not contain a single dot ('@samp{.}') you will have to type the full pathname of your program: e.g. @file{/home/ihm/foo} (or at least @file{./foo}).

@item
Save your program into a file (e.g. @file{foo}) and type @samp{yabasic foo}. This assumes, that the directory, where yabasic resides, is contained within your @code{PATH}-variable.

@item
Finally your may simply type @samp{yabasic} (maybe it will be necessary to include its full pathname). This will make yabasic come up and you will be asked to type in your program. Once you are finished, you need to type @samp{return} twice, and yabasic will parse and execute your program.

@quotation

@strong{Note}

This is @i{not} the preferred way of starting yabasic ! Simply because the program, that you have typed, @i{can not be saved} and will be lost inevitably ! There is no such thing as a @code{save}-command and therefore no way to conserve the program, that you have typed. This mode is only intended for quick hacks, and short programs, i.e. for using yabasic as some sort of fancy desktop calculator.
@end quotation
@end enumerate

@node The yabasic-program under Unix - Options, Setting defaults, The yabasic-program under Unix - Starting yabasic, The yabasic-program under Unix
@section Options

yabasic accepts a number of options on the commandline. All these options below may be abbreviated, as long as the abbreviation does not become ambiguous. For example you may write @samp{-e} instead of @samp{-execute}.

@table @asis

@item @samp{-help} or @samp{-?}
Prints a short help message, which itself describes two further help-options.

@item @samp{-fg @var{FOREGROUND-COLOR}} or @samp{-foreground @var{FOREGROUND-COLOR}}
Define the foreground color for the graphics-window (that will be opened with @code{open window (@pxref{open window})}). The usual X11 colornames, like @i{red}, @i{green}, @dots{} are accepted. This value cannot be changed, once yabasic has been started.

@item @samp{-bg @var{BACKGROUND-COLOR}} or @samp{-background @var{BACKGROUND-COLOR}}
Define the background color for the graphics-window. The usual X11 colornames are accepted. This value cannot be changed, once yabasic has been started.

@item @samp{-geometry +@var{X-POSITION}+@var{Y-POSITION}}
Sets the position of the graphic window, that is opened by @code{open window} (the @i{size} of this window, of course, is specified with the @code{open window}-command). An example would be @samp{+20+10}, which would place the graphic window 10 pixels below the upper border and 20 pixels right of the left border of the screen. Note, that the size of the window may not be specified here (well it may, but it will be ignored anyway). This value cannot be changed, once yabasic has been started.

@item @samp{-display @var{BACKGROUND-COLOR}}
Specify the @i{display}, where the graphics window of yabasic should appear. Normally, however this value will be already present within the environment variable @code{DISPLAY}.

@item @samp{-font @var{NAME-OF-FONT}}
Name of the font, which will be used for text within the graphics window.

@item @samp{-execute @var{A-PROGRAM-AS-A-SINGLE-STRING}}
With this option you may specify some yabasic-code to be executed right away.This is useful for very short programs, which you do not want to save to a file. If this option is given, yabasic will not read any code from a file. E.g.

@example
yabasic -e 'for a=1 to 10:print a*a:next a'
@end example

@noindent
prints the square numbers from 1 to 10.

@item @samp{-infolevel @var{INFOLEVEL}}
Change the @i{infolevel} of yabasic where @var{INFOLEVEL} can be one of @samp{debug}, @samp{note}, @samp{warning}, @samp{error} and @samp{fatal} (the default is @samp{warning}). This option changes the amount of debugging-information yabasic produces. However, normally only the author of yabasic (@i{me} !) would want to change this.

@item @samp{-doc @var{NAME-OF-A-PROGRAM}}
Print the @i{embedded documentation} of the named program. The embedded documentation of a program consists of all the comments within the program, which start with the special keyword @code{doc (@pxref{doc})}.

@item @samp{-librarypath @var{DIRECTORY-WITH-LIBRARIES}}
Change the directory from which libraries will be imported (with the @code{import (@pxref{import})}-command). See also this entry for more information about the way, libraries will be searched.
@end table

@node Setting defaults, , The yabasic-program under Unix - Options, The yabasic-program under Unix
@section Setting defaults

If you want to set some options @i{once for all}, you may put them into your X-Windows resource file. This is usually the file @file{.Xresources} or some such within your home directory (type @samp{man X} for details).

Here is a sample section, which may appear within this file:

@example

yabasic*foreground: blue
yabasic*background: gold
yabasic*geometry: +10+10
yabasic*font: 9x15
@end example

This will set the foreground color of the graphic-window to @i{blue} and the background color to @i{gold}. The window will appear at position @i{10,10} and the text font will be @i{9x15}.

@node Some features of yabasic; grouped by topic, All commands and functions of yabasic, The yabasic-program under Unix, Top
@chapter Some features of yabasic, grouped by topic

This chapter has sections for some of the major features of yabasic and names a few commands related with each area. So, depending on your interest, you find the most important commands of this area named; the other commands from this area may then be discovered through the links in the @i{see also}-section.

@menu
* print; input and others::
* Control statements; loops; if and switch::
* Drawing and painting::
* Reading from and writing to files::
* Subroutines and Libraries::
* String processing::
* Arithmetic::
* Data and such::
* Other interesting commands_::
@end menu

@node print; input and others, Control statements; loops; if and switch, , Some features of yabasic; grouped by topic
@section print, input and others

The @code{print (@pxref{print})}-command is used to put text on the text screen. Here, the term @i{text screen} stands for your terminal (under Unix) or the console window (under Windows).

At the bottom line, @code{print} simply outputs its argument to the text window. However, once you have called @code{clear screen (@pxref{clear screen})} you may use advanced features like printing colors or copying areas of text with @code{getscreen$ (@pxref{getscreen$[]})} or @code{putscreen (@pxref{putscreen})}.

You may ask the user for input with the @code{input (@pxref{input})}-command; use @code{inkey$ (@pxref{inkey$})} to get each key as soon as it is pressed.

@node Control statements; loops; if and switch, Drawing and painting, print; input and others, Some features of yabasic; grouped by topic
@section Control statements: loops, if and switch

Of course, yabasic has the @code{goto (@pxref{goto})}- and @code{gosub (@pxref{gosub})}-statements; you may go to a @code{label (@pxref{label})} or a @i{line number} (which is just a special kind of label). @code{goto (@pxref{goto})}, despite its bad reputation ([@code{goto} considered harmful]), has still its good uses; however in many cases you are probably better off with loops like @code{repeat (@pxref{repeat})}-@code{until (@pxref{until})}, @code{while (@pxref{while})}-@code{wend (@pxref{wend})} or @code{do (@pxref{do})}-@code{loop (@pxref{loop})}; you may leave any of these loops with the @code{break (@pxref{break})}-statement or start the next iteration immediately with @code{continue (@pxref{continue})}.

Decisions can be made with the @code{if (@pxref{if})}-statement, which comes either in a @i{short} and a @i{long} form. The short form has no @code{then (@pxref{then})}-keyword and extends up to the end of the line. The long form extends up to the final @code{endif (@pxref{endif})} and may use some of the keywords @code{then (@pxref{then})} (which introduces the long form), @code{else (@pxref{else})} or @code{elsif (@pxref{elsif})}.

If you want to test the result of an expression against many different values, you should probably use the @code{switch (@pxref{switch})}-statement.

@node Drawing and painting, Reading from and writing to files, Control statements; loops; if and switch, Some features of yabasic; grouped by topic
@section Drawing and painting

You need to call @code{open window (@pxref{open window})} before you may draw anything with either @code{line (@pxref{line})}, @code{circle (@pxref{circle})} or @code{rectangle (@pxref{rectangle})}; all of these statements may be decorated with @code{clear (@pxref{clear})} or @code{fill (@pxref{fill})}. Note however, that all graphics in yabasic is @i{monochrome} ("black on white"). Moreover, there can only be a single window open at any given moment in time.

Evyerything you have drawn can be send to your printer too, if you use the @code{open printer (@pxref{open printer})} command.

To allow for some (very) limited version of animated graphics, yabasic offers the commands @code{getbit$ (@pxref{getbit$[]})} and @code{putbit (@pxref{putbit})}, which retrieve rectangular regions from the graphics-window into a string or vice versa.

If you want to sense mouse-clicks, you may use the @code{inkey$ (@pxref{inkey$})}-function.

@node Reading from and writing to files, Subroutines and Libraries, Drawing and painting, Some features of yabasic; grouped by topic
@section Reading from and writing to files

Before you may read or write a file, you need to @code{open (@pxref{open})} it; once you are done, you should @code{close (@pxref{close})} it. Each open file is designated by a simple number, which might be stored within a variable and must be supplied if you want to access the file. This is simply done by putting a hash ('@samp{#}') followd by the number of the file after the keyword @code{input (@pxref{input})} (for reading from) or @code{print (@pxref{print})} (for writing to a file) respectively.

If you need more control, you may consider reading and writing one byte at a time, using the multi-purpose commands @code{peek (@pxref{peek})} and @code{poke (@pxref{poke})}.

@node Subroutines and Libraries, String processing, Reading from and writing to files, Some features of yabasic; grouped by topic
@section Subroutines and Libraries

The best way to break any yabasic-program into smaller, more manageable chunks are @i{subroutines} and @i{libraries}. They are yabasic's most advanced means of structuring a program.

Subroutines are created with the command @code{sub (@pxref{sub})}. they accept parameters and may return a value. Subroutines can be called much like any builtin function of yabasic; therefore they allow one to @i{extend} the language itself.

Once you have created a set of related subroutines and you feel that they could be useful in other programs too, you may collect them into a @i{library}. Such a library is contained within a separate file and may be included in any of your programs, using the keyword @code{import (@pxref{import})}.

@node String processing, Arithmetic, Subroutines and Libraries, Some features of yabasic; grouped by topic
@section String processing

yabasic has the usual functions to extract parts from a string: @code{left$ (@pxref{left$[]})}, @code{mid$ (@pxref{mid$[]})} and @code{right$ (@pxref{right$[]})}. Note, that all of them can be assigned to, i.e. they may @i{change} part of a string.

If you want to split a string into tokens you should use the functions @code{token (@pxref{token[]})} or @code{split (@pxref{split[]})}.

There is quite a bunch of other string-processing functions like @code{upper$ (@pxref{upper$[]})} (converting to upper case), @code{instr (@pxref{instr[]})} (finding one string within the other), @code{chr$ (@pxref{chr$[]})} (converting an ascii-code into a character), @code{glob (@pxref{glob[]})} (testing a string against a pattern) and more. Just follow the links.

@node Arithmetic, Data and such, String processing, Some features of yabasic; grouped by topic
@section Arithmetic

Yabasic handles numbers and arithmetic: You may calculate trigonometric functions like @code{sin (@pxref{sin[]})} or @code{atan (@pxref{atan[]})}, or logarithms (with @code{log (@pxref{log[]})}). Bitwise operations, like @code{and (@pxref{and[]})} or @code{or (@pxref{or[]})} are available as well @code{min (@pxref{min[]})} or @code{max (@pxref{max[]})} (calculate the minimum or maximum of its argument) or @code{mod (@pxref{mod[]})} or @code{int (@pxref{int[]})} (reminder of a division or integer part or a number).

@node Data and such, Other interesting commands_, Arithmetic, Some features of yabasic; grouped by topic
@section Data and such

You may store data within your program within @code{data (@pxref{data})}-statements; during execution you will probably want to @code{read (@pxref{read})} it into @i{arrays}, which must have been @code{dim (@pxref{dim})}ed before.

@node Other interesting commands_, , Data and such, Some features of yabasic; grouped by topic
@section Other interesting commands.

@itemize @bullet{}

@item
Yabasic programs may start other programs with the commands @code{system (@pxref{system$[]})} and @code{system$ (@pxref{system[]})}.

@item
@code{peek (@pxref{peek})} and @code{poke (@pxref{poke})} allow one to get and set internal information; either for the operating system (i.e. Unix or Windows) or yabasic itself.

@item
The current time or date can be retrieved with (guess what !) @code{time$ (@pxref{time$})} and @code{date$ (@pxref{date$})}.
@end itemize

@node All commands and functions of yabasic, A grab-bag of some general concepts and terms, Some features of yabasic; grouped by topic, Top
@chapter All commands and functions of yabasic

@menu
* A note on the synopsis-sections of reference-entries_::
* A::
* B::
* C::
* D::
* E::
* F::
* G::
* H::
* I::
* L::
* M::
* N::
* O::
* P::
* R::
* S::
* T::
* U::
* V::
* W::
* X::
* Special characters::
@end menu

@node A note on the synopsis-sections of reference-entries_, A, , All commands and functions of yabasic
@section A note on the synopsis-sections of reference-entries.

Each reference-entries to follow contains a @i{synopsis} section, which specifies two things:

@itemize @bullet{}

@item
The type and number of arguments each function or command accepts.

@item
The type of value (if any) returned by the function.
@end itemize

If possible, the name of the variables is choosen to give a hint on their meaning, e.g. a variable might be named @t{colour$}, if it should contain a colour.

An example:

@example

xpos=mousex()
xpos=mousex(mouseclick$)
@end example

This is the synopsis for the @code{mousex}-function, which returns the horizontal screen-position of your mouse-cursor.

The synopsis contains two lines, showing, that @code{mousex} might be called with or without an argument and returns a number (see the reference entry for mousex (@pxref{mousex}) for a description).

The synopsis above contains two variables, whose names give a hint on their meaning:

@itemize @bullet{}

@item
The name @code{mouseclick$} is chosen, because the @code{mousex}-function accepts a string representing a mouse click as returned by @code{inkey$}.

@item
The name @code{xpos} is chosen, because @code{mousex} returns a horizontal or @i{x}-position.
@end itemize

If there is no obvious name for the values accepted or returned by a function or command, a name like @code{a$}, @code{x} or @code{foo} is chosen.

@node A, B, A note on the synopsis-sections of reference-entries_, All commands and functions of yabasic
@section A

@menu
* abs[]::                       returns the absolute value of its numeric
                                  argument
* acos[]::                      returns the arcus cosine of its numeric
                                  argument
* and::                         logical and, used in conditions
* and[]::                       the bitwise arithmetic @code{and}
* arraydim[]::                  returns the dimension of the array, which
                                  is passed as an array reference ()
* arraysize[]::                 returns the size of a dimension of an array
* asc[]::                       accepts a string and returns the position
                                  of its first character within the
                                  @acronym{ascii} charset
* asin[]::                      returns the arcus sine of its numeric
                                  argument
* at[]::                        can be used in the @code{print}-command to
                                  place the output at a specified position
* atan[]::                      returns the arcus tangens of its numeric
                                  argument
@end menu

@node abs[], acos[], , A
@subsection abs()
@subsubheading Name

abs() --- returns the absolute value of its numeric argument
@subsubheading Synopsis

@example
y=abs(x)
@end example
@subsubheading Description

If the argument of the @code{abs}-function is positive (e.g. 2) it is returned unchanged, if the argument is negative (e.g. -1) it is returned as a positive value (e.g. 1).
@subsubheading Example

@example

print abs(-2),abs(2)
          
@end example

This example will print @samp{2 2}
@subsubheading See also

@code{sig} (@pxref{sig[]})

@node acos[], and, abs[], A
@subsection acos()
@subsubheading Name

acos() --- returns the arcus cosine of its numeric argument
@subsubheading Synopsis

@example
x=acos(angle)
@end example
@subsubheading Description

The @code{acos} is the arcus cosine-function, i.e. the inverse of the @code{cos} (@pxref{cos[]})-function. Or, more elaborate: It Returns the angle (in radian, not degree !), which, fed to the cosine-function will produce the argument passed to the @code{acos}-function.
@subsubheading Example

@example

print acos(0.5),acos(cos(pi))
          
@end example

This example will print @samp{1.0472 3.14159} which are
